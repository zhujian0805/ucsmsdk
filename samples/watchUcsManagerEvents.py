#!/usr/bin/python

# Copyright 2013 Cisco Systems, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script shows how to monitor UCS Manager events and define your own 
# call back to take specific action on the respective events.
# Usage: watchUcsManagerEvents.py [options]
#
# Options:
# -h, --help            show this help message and exit
# -i IP, --ip=IP        [Mandatory] UCSM IP Address
# -u USERNAME, --username=USERNAME
#                       [Mandatory] Account Username for UCSM Login
# -p PASSWORD, --password=PASSWORD
#                       [Mandatory] Account Password for UCSM Login
#

import getpass
import optparse
import platform
from UcsSdk import *

def getpassword(prompt):
	if platform.system() == "Linux":
		return getpass.unix_getpass(prompt=prompt)
	elif platform.system() == "Windows" or platform.system() == "Microsoft":
		return getpass.win_getpass(prompt=prompt)
	else:
		return getpass.getpass(prompt=prompt)

def callback_all(mce):
	print 'Received a New Event with ClassId: ' + str(mce.mo.classId)
	print "ChangeList: ", mce.changeList
	print "EventId: ", mce.eventId
	
def callback_lsServer(mce):
	print 'Received a New Service Profile Event: ' + str(mce.mo.classId)
	print "ChangeList: ", mce.changeList
	print "EventId: ", mce.eventId

if __name__ == "__main__":
	handle = UcsHandle()
	try:
		parser = optparse.OptionParser()
		parser.add_option('-i', '--ip',dest="ip",
		                  help="[Mandatory] UCSM IP Address")
		parser.add_option('-u', '--username',dest="userName",
		                  help="[Mandatory] Account Username for UCSM Login")
		parser.add_option('-p', '--password',dest="password",
		                  help="[Mandatory] Account Password for UCSM Login")

		(options, args) = parser.parse_args()
		
		if not options.ip:
			parser.print_help()
			parser.error("Provide UCSM IP Address")
		if not options.userName:
			parser.print_help()
			parser.error("Provide UCSM UserName")
		if not options.password:
			options.password=getpassword("UCSM Password:")

		handle.Login(options.ip,options.userName,options.password)
	
		# Add an event handle "ev_all" to montitor the events generated by UCS
		# Manager for any of the ClassIds
		ev_all = handle.AddEventHandler()
		
		# Get the list of active event handles.
		handle.GetEventHandlers()
			
		# Remove an event handle "ev_all"
		handle.RemoveEventHandler(ev_all)
		
		# Use your own callback method to take specific action on respective
		# events.
		ev_all_callback = handle.AddEventHandler(callBack = callback_all)
		handle.RemoveEventHandler(ev_all_callback)
		
		# Add an event handle to filter events based on classId = lsServer
		ev_lsServer = handle.AddEventHandler(classId = "LsServer", 
											callBack = callback_lsServer)
		handle.RemoveEventHandler(ev_lsServer)
		
		# loop that keeps the script running for us to get events/callbacks
		while True:
			time.sleep(5)
	
		handle.Logout()
	
	except Exception, err:
		handle.Logout()
		print "Exception:", str(err)
		import traceback, sys
		print '-'*60
		traceback.print_exc(file=sys.stdout)
		print '-'*60
		handle.Logout()
